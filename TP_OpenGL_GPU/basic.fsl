#version 430

layout(location = 1) uniform mat4x4 camera;
layout(location = 3) uniform mat4x4 model;
layout(location = 4) uniform vec3 cam_pos;
layout(location = 5) uniform vec3 light_pos;

uniform sampler2D texture_sampler[4];
uniform sampler2D shadow_map;

out vec4 color_out;

in vec4 frag_pt;
in vec3 frag_normal;
in vec2 frag_uv;
flat in uint frag_texture;
in vec4 shadow_coord;

vec4 light_color = vec4(1, 1, 1, 1);
vec4 diffus = vec4(1, 1, 1, 1);
vec4 specular = vec4(1, 1, 1, 1);
float light_power = 15;
float ambient_power = 0.1;

vec2 poissonDisk[16] = vec2[]( 
   vec2(-0.94201624, -0.39906216), 
   vec2(0.94558609, -0.76890725), 
   vec2(-0.094184101, -0.92938870), 
   vec2(0.34495938, 0.29387760), 
   vec2(-0.91588581, 0.45771432), 
   vec2(-0.81544232, -0.87912464), 
   vec2(-0.38277543, 0.27676845), 
   vec2(0.97484398, 0.75648379), 
   vec2(0.44323325, -0.97511554), 
   vec2(0.53742981, -0.47373420), 
   vec2(-0.26496911, -0.41893023), 
   vec2(0.79197514, 0.19090188), 
   vec2(-0.24188840, 0.99706507), 
   vec2(-0.81409955, 0.91437590), 
   vec2(0.19984126, 0.78641367), 
   vec2(0.14383161, -0.14100790) 
);

void main()
{
	// Calculate normal in world coordinates
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 n = normalize(normalMatrix * frag_normal);

    // Calculate the location of this fragment (pixel) in world coordinates
    vec3 frag_pos = (model * frag_pt).xyz;

	// Direction of the light (from the fragment to the light)
	vec3 light = (model * vec4(light_pos, 1)).xyz;
	vec3 l = normalize(light - frag_pos);

	// Eye vector (towards the camera)
	vec3 cam = (model * vec4(cam_pos, 1)).xyz;
	vec3 e = normalize(cam - frag_pos);

	// Direction in which the triangle reflects the light
	vec3 r = reflect(-l, n);

	// Cosine of the angle between the Eye vector and the Reflect vector, clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cos_alpha = clamp(dot(e, r), 0, 1);

	// Cosine of the angle between the normal and the light direction, clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cos_theta = clamp(dot(n, l), 0, 1);
	float dist = distance(frag_pos, light);

	vec4 color;

	if(frag_texture >= 0)
		color = texture(texture_sampler[frag_texture], frag_uv).rgba;
	else
		color = vec4(0.7, 0.7, 0.7, 1);

	vec4 ambient = vec4(ambient_power, ambient_power, ambient_power, 1) * color;
	diffus = color;
	specular = color;

	vec4 coord = shadow_coord / shadow_coord.w;
	
	// Used to lower moiré pattern and self-shadowing
	coord.z -= 0.0005;

	float distFromLight = texture(shadow_map, coord.xy).z;
		
	float shadow = 1.0;

	// Poisson Sampling
	for (int i = 0; i < 16; i++)
	{
		if (texture(shadow_map, coord.xy + poissonDisk[i] / 700.0).z < coord.z)
		{
			shadow -= 0.05; // max visibility 0.2
		}
	}

	vec4 c_out = ambient // Ambient : simulates indirect lighting
	+ shadow * diffus * light_color * light_power * cos_theta / (dist * dist) // Diffuse : "color" of the object
	+ shadow * specular * light_color * light_power * pow(cos_alpha, 5) / (dist * dist); // Specular : reflective highlight, like a mirror

	// Gamma correction
	c_out.x = pow(c_out.x, 1 / 2.2);
	c_out.y = pow(c_out.y, 1 / 2.2);
	c_out.z = pow(c_out.z, 1 / 2.2);

	//color_out = texture(shadow_map, coord.xy).rgba;
	color_out = c_out;
}