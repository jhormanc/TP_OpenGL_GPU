#version 430

layout(location = 3) uniform mat4x4 model;
layout(location = 4) uniform vec3 cam_pos;

in vec4 frag_pt;
in vec3 frag_normal;

vec3 ambient = vec3(1, 0.9804, 0.8235);
vec3 diffus = vec3(1, 0.8392, 0.6666);
vec3 specular = vec3(1, 1, 1);
float shininess = 5.0;

void main()
{
	// Calculate normal in world coordinates
    vec3 n = normalize((model * vec4(frag_normal, 1)).xyz);

    // Calculate the location of this fragment (pixel) in world coordinates
    vec3 frag_pos = (model * frag_pt).xyz;

	// Direction of the light (from the center to the light)
	vec3 l = normalize(vec3(0, 0, 0) - frag_pos);

	// Eye vector (towards the camera)
	vec3 e = normalize(cam_pos - frag_pos);

	float df = max(0.0, dot(e, n));
    vec3 color = ambient + diffus * df;

    float sf = df <= 0.0 ? 0.0 : max(0.0, dot(l, n));
    sf = pow(sf, shininess);
    color += specular * sf;

	// Gamma correction
	color.x = pow(color.x, 1 / 2.2);
	color.y = pow(color.y, 1 / 2.2);
	color.z = pow(color.z, 1 / 2.2);

    gl_FragColor = vec4(color, 1.0);
}