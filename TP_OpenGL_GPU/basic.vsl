#version 430

layout(location = 1) uniform mat4x4 MVP;
layout(location = 2) uniform mat4x4 M;
layout(location = 3) uniform mat4x4 V;
layout(location = 4) uniform vec3 light_pos;
layout(location = 5) uniform mat4x4 depthBias_MVP;

layout(location = 11) in vec4 pt;
layout(location = 12) in vec3 normal;
layout(location = 13) in vec2 uv;
layout(location = 14) in int num_sampler;

out vec3 normal_out;
out vec2 uv_out;
out int num_texture;
out vec3 position_worldspace;
out vec3 eyeDirection_cameraspace;
out vec3 lightDirection_cameraspace;
out vec3 normal_cameraspace;
out vec3 lightPos_worldspace;
out vec4 shadow_coord;

void main()
{
	vec4 p = pt / pt.w;
	gl_Position = MVP * p;
	uv_out = uv;
	normal_out = normal;
	num_texture = num_sampler;
	lightPos_worldspace = light_pos;
	shadow_coord = depthBias_MVP * p;

	// Position of the vertex, in worldspace : M * position
    position_worldspace = (M * p).xyz;

    // Vector that goes from the vertex to the camera, in camera space.
    // In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = (V * M * p).xyz;
	eyeDirection_cameraspace = vec3(0, 0, 0) - vertexPosition_cameraspace;
 
	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 lightPosition_cameraspace = (V * vec4(light_pos, 1)).xyz;
	lightDirection_cameraspace = lightPosition_cameraspace + eyeDirection_cameraspace;
 
	// Normal of the the vertex, in camera space
	normal_cameraspace = (V * M * vec4(normal, 0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
}
